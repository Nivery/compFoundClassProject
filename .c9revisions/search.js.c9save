{"ts":1351873965825,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"function searchMedia(media_to_search) {\n    // search_terms is an array of terms the user wants to search for. We initialize it here to have it ready.\n\tvar search_terms = [];\n\t\n\tvar search_type = document.getElementById('search_type').selectedIndex;\n\t\n\t// search_indices stores the index number of objects in library_content that match any terms in search_terms\n\t// Having the index numbers make sorting fun and easy.\n\tvar search_indices = [];\n\n\t// count is used to count the number of times search terms appear in each object. It is used by recur\n\tvar count = 1;\n\t\n\t// recur is used to keep track of the number of times search terms appear in each object \n\t// and is used to rank search results by term frequency in search_results\n\tvar recur = [];\n\t\n\tvar search_results = [];\n\t\n\t// If user input is not empty or only white space, split input at whitespace and assign the resulting terms to search_terms\n\t// We do this to prevent a user from entering nothing or a space and returning the entire catalog\n\tif (document.getElementById('search').value !== '' && document.getElementById('search').value.match(/\\S/)) {\n\t\tsearch_terms = document.getElementById('search').value.split(/\\s+/);\n\t} else {\n\t\treturn;\n\t}\n\t\n\t//------LOOK FOR STUFF-------\n\t// For each term in the user's input string, check to see if that term matches any \n\t// of the properties of every object in the library_content array\n\tif (search_type === 0) {\n\t\tfor (var i = 0; i < search_terms.length; i++) {\t\n\t\t\t// convert the search term into a regular expression for case-insensitive partial matching\n\t\t\tvar term = new RegExp(search_terms[i], 'i');\n\t\t\tfor (var a = 0; a < media_to_search.length; a++) {\n\t\t\t\t// for each (variable in object) is a nifty way to iterate over the value of each object property\n\t\t\t\tfor each (x in library_content[a]) {\n\t\t\t\t\tif (x.match(term)) {\n\t\t\t\t\t\tsearch_indices.push(a);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else if (search_type === 1) {\n\t\tfor (var i = 0; i < search_terms.length; i++) {\t\n\t\t\t// convert the search term into a regular expression for case-insensitive partial matching\n\t\t\tvar term = new RegExp(search_terms[i], 'i');\n\t\t\tfor (var a = 0; a < media_to_search.length; a++) {\n\t\t\t\tif (media_to_search[a].creator.match(term)) {\n\t\t\t\t\tsearch_indices.push(a);\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else if (search_type === 2) {\n\t\tfor (var i = 0; i < search_terms.length; i++) {\t\n\t\t\t// convert the search term into a regular expression for case-insensitive partial matching\n\t\t\tvar term = new RegExp(search_terms[i], 'i');\n\t\t\tfor (var a = 0; a < media_to_search.length; a++) {\n\t\t\t\tif (media_to_search[a].title.match(term)) {\n\t\t\t\t\tsearch_indices.push(a);\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else if (search_type === 3) {\n\t\tfor (var i = 0; i < search_terms.length; i++) {\t\n\t\t\t// convert the search term into a regular expression for case-insensitive partial matching\n\t\t\tvar term = new RegExp(search_terms[i], 'i');\n\t\t\tfor (var a = 0; a < media_to_search.length; a++) {\n\t\t\t\tif (media_to_search[a].year.match(term)) {\n\t\t\t\t\tsearch_indices.push(a);\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t//------RANK SEARCH RESULTS-------\n\t//Sort the search_indices array so that all occurrences of an index are contiguous\n\t//The default sort sorts the numbers by their lexical rather than numerical value\n\tsearch_indices.sort();\n\t\n\t//Set up an array that will track where each index group begins in search_indicies and how many members each group has\n\tfor (var i = 0; i < search_indices.length; i++) {\n\t\t//If the current element matches the next one, increment counter to keep track of the number of matching elements\n\t\tif (search_indices[i] === search_indices[i + 1]) {\n\t\t\tcount++;\n\t\t} else {\n\t\t\t// Push an array with two elements into our recur array\n\t\t\t// The first element in the two-part array is index of the first element in a set of one or more matching indices\n\t\t\t// The second element is the number of elements after the index that match it (Should change to end index for slice function?)\n\t\t\trecur.push([i - (count - 1), count]);\n\t\t\t// Reset the counter for the next go around\n\t\t\tcount = 1;\n\t\t}\n\t}\n\t// Sort recur by the number of elements in each index group (aka sort numerically from high to low by the second element in each of recur's sub-arrays)\n\trecur.sort(function(a,b) {return b[1] - a[1]});\n\t\n\n\t// Prep for output\t\n\tfor (var i = 0; i < recur.length; i++) {\n\t\tsearch_results.push(library_content[search_indices[recur[i][0]]]);\n\t}\n\t\n\tdisplayMedia(search_results);\n}"]],"start1":0,"start2":0,"length1":0,"length2":4392}]],"length":4392}
{"contributors":[],"silentsave":false,"ts":1351873967251,"patch":[[{"diffs":[[1,"function searchMedia(media_to_search) {\n    // search_terms is an array of terms the user wants to search for. We initialize it here to have it ready.\n\tvar search_terms = [];\n\t\n\tvar search_type = document.getElementById('search_type').selectedIndex;\n\t\n\t// search_indices stores the index number of objects in library_content that match any terms in search_terms\n\t// Having the index numbers make sorting fun and easy.\n\tvar search_indices = [];\n\n\t// count is used to count the number of times search terms appear in each object. It is used by recur\n\tvar count = 1;\n\t\n\t// recur is used to keep track of the number of times search terms appear in each object \n\t// and is used to rank search results by term frequency in search_results\n\tvar recur = [];\n\t\n\tvar search_results = [];\n\t\n\t// If user input is not empty or only white space, split input at whitespace and assign the resulting terms to search_terms\n\t// We do this to prevent a user from entering nothing or a space and returning the entire catalog\n\tif (document.getElementById('search').value !== '' && document.getElementById('search').value.match(/\\S/)) {\n\t\tsearch_terms = document.getElementById('search').value.split(/\\s+/);\n\t} else {\n\t\treturn;\n\t}\n\t\n\t//------LOOK FOR STUFF-------\n\t// For each term in the user's input string, check to see if that term matches any \n\t// of the properties of every object in the library_content array\n\tif (search_type === 0) {\n\t\tfor (var i = 0; i < search_terms.length; i++) {\t\n\t\t\t// convert the search term into a regular expression for case-insensitive partial matching\n\t\t\tvar term = new RegExp(search_terms[i], 'i');\n\t\t\tfor (var a = 0; a < media_to_search.length; a++) {\n\t\t\t\t// for each (variable in object) is a nifty way to iterate over the value of each object property\n\t\t\t\tfor each (x in library_content[a]) {\n\t\t\t\t\tif (x.match(term)) {\n\t\t\t\t\t\tsearch_indices.push(a);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else if (search_type === 1) {\n\t\tfor (var i = 0; i < search_terms.length; i++) {\t\n\t\t\t// convert the search term into a regular expression for case-insensitive partial matching\n\t\t\tvar term = new RegExp(search_terms[i], 'i');\n\t\t\tfor (var a = 0; a < media_to_search.length; a++) {\n\t\t\t\tif (media_to_search[a].creator.match(term)) {\n\t\t\t\t\tsearch_indices.push(a);\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else if (search_type === 2) {\n\t\tfor (var i = 0; i < search_terms.length; i++) {\t\n\t\t\t// convert the search term into a regular expression for case-insensitive partial matching\n\t\t\tvar term = new RegExp(search_terms[i], 'i');\n\t\t\tfor (var a = 0; a < media_to_search.length; a++) {\n\t\t\t\tif (media_to_search[a].title.match(term)) {\n\t\t\t\t\tsearch_indices.push(a);\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else if (search_type === 3) {\n\t\tfor (var i = 0; i < search_terms.length; i++) {\t\n\t\t\t// convert the search term into a regular expression for case-insensitive partial matching\n\t\t\tvar term = new RegExp(search_terms[i], 'i');\n\t\t\tfor (var a = 0; a < media_to_search.length; a++) {\n\t\t\t\tif (media_to_search[a].year.match(term)) {\n\t\t\t\t\tsearch_indices.push(a);\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t//------RANK SEARCH RESULTS-------\n\t//Sort the search_indices array so that all occurrences of an index are contiguous\n\t//The default sort sorts the numbers by their lexical rather than numerical value\n\tsearch_indices.sort();\n\t\n\t//Set up an array that will track where each index group begins in search_indicies and how many members each group has\n\tfor (var i = 0; i < search_indices.length; i++) {\n\t\t//If the current element matches the next one, increment counter to keep track of the number of matching elements\n\t\tif (search_indices[i] === search_indices[i + 1]) {\n\t\t\tcount++;\n\t\t} else {\n\t\t\t// Push an array with two elements into our recur array\n\t\t\t// The first element in the two-part array is index of the first element in a set of one or more matching indices\n\t\t\t// The second element is the number of elements after the index that match it (Should change to end index for slice function?)\n\t\t\trecur.push([i - (count - 1), count]);\n\t\t\t// Reset the counter for the next go around\n\t\t\tcount = 1;\n\t\t}\n\t}\n\t// Sort recur by the number of elements in each index group (aka sort numerically from high to low by the second element in each of recur's sub-arrays)\n\trecur.sort(function(a,b) {return b[1] - a[1]});\n\t\n\n\t// Prep for output\t\n\tfor (var i = 0; i < recur.length; i++) {\n\t\tsearch_results.push(library_content[search_indices[recur[i][0]]]);\n\t}\n\t\n\tdisplayMedia(search_results);\n}"]],"start1":0,"start2":0,"length1":0,"length2":4392}]],"length":4392,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351910546686,"patch":[[{"diffs":[[0,"_content array\n\t"],[-1,""],[0,""],[1,"// eventually, I want to make this loop skip the type, age_group, and in_out categories, which can all be handled by filter anyway\n\t"],[0,"if (search_type "]],"start1":1377,"start2":1377,"length1":32,"length2":164},{"diffs":[[0,"terms[i], 'i');\n"],[1,"\n"],[0,"\t\t\tfor (var a = "]],"start1":1727,"start2":1727,"length1":32,"length2":33},{"diffs":[[0,") {\n"],[-1,"\t\t\t\t// for each (variable in object) is a nifty way to iterate over the value of each object property\n\t\t\t\tfor each (x in library_content[a]) {\n\t\t\t\t\tif (x.match(term)) {\n\t\t\t\t\t\tsearch_indices.push(a);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else if (search_type === 1) {\n\t\tfor (var i = 0; i < search_terms.length; i++) {\t\n\t\t\t// convert the search term into a regular expression for case-insensitive partial matching\n\t\t\tvar term = new RegExp(search_terms[i], 'i');\n\t\t\tfor (var a = 0; a < media_to_search.length; a++) {\n\t\t\t\tif (media_to_search[a].creator.match(term)) {\n\t\t\t\t\tsearch_indices.push(a);\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else if (search_type === 2) {\n\t\tfor (var i = 0; i < search_terms.length; i++) {\t\n\t\t\t// convert the search term into a regular expression for case-insensitive partial matching\n\t\t\tvar term = new RegExp(search_terms[i], 'i');\n\t\t\tfor (var a = 0; a < media_to_search.length; a++) {\n\t\t\t\tif (media_to_search[a].title.match(term)) {\n\t\t\t\t\tsearch_indices.push(a);\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else if (search_type === 3) {\n\t\tfor (var i = 0; i < search_terms.length; i++) {\t\n\t\t\t// convert the search term into a regular expression for case-insensitive partial matching\n\t\t\tvar term = new RegExp(search_terms[i], 'i');\n\t\t\tfor (var a = 0; a < media_to_search.length; a++) {\n\t\t\t\tif (media_to_search[a].year.match(term)) {\n\t\t\t\t\tsearch_indices.push(a);\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t//------RANK SEARCH RESULTS-------\n\t//Sort the search_indices array so that all occurrences of an index are contiguous\n\t//The default sort sorts the numbers by their lexical rather than numerical value\n\tsearch_indices.sort();\n\t\n\t//Set up an array that will track where each index group begins in search_indicies and how many members each group has\n\tfor (var i = 0; i < search_indices.length; i++) {\n\t\t//If the current element matches the next one, increment counter to keep track of the number of matching elements\n\t\tif (search_indices[i] === search_indices[i + 1]) {\n\t\t\tcount++;\n\t\t} else {\n\t\t\t// Push an array with two elements into our recur array\n\t\t\t// The first element in the two-part array is index of the first element in a set of one or more matching indices\n\t\t\t// The second element is the number of elements after the index that match it (Should change to end index for slice function?)\n\t\t\trecur.push([i - (count - 1), count]);\n\t\t\t// Reset the counter for the next go around\n\t\t\tcount = 1;\n\t\t}\n\t}\n\t// Sort recur by the number of elements in each index group (aka sort numerically from high to low by the second element in each of recur's sub-arrays)\n\trecur.sort(function(a,b) {return b[1] - a[1]});\n\t\n\n\t// Prep for output\t\n\tfor (var i = 0; i < recur.length; i++) {\n\t\tsearch_results.push(library_content[search_indices[recur[i][0]]]);\n\t}\n\t\n\tdisplayMedia(search_results);\n}function searchMedia(media_to_search) {\n    // search_terms is an array of terms the user wants to search for. We initialize it here to have it ready.\n\tvar search_terms = [];\n\t\n\tvar search_type = document.getElementById('search_type').selectedIndex;\n\t\n\t// search_indices stores the index number of objects in library_content that match any terms in search_terms\n\t// Having the index numbers make sorting fun and easy.\n\tvar search_indices = [];\n\n\t// count is used to count the number of times search terms appear in each object. It is used by recur\n\tvar count = 1;\n\t\n\t// recur is used to keep track of the number of times search terms appear in each object \n\t// and is used to rank search results by term frequency in search_results\n\tvar recur = [];\n\t\n\tvar search_results = [];\n\t\n\t// If user input is not empty or only white space, split input at whitespace and assign the resulting terms to search_terms\n\t// We do this to prevent a user from entering nothing or a space and returning the entire catalog\n\tif (document.getElementById('search').value !== '' && document.getElementById('search').value.match(/\\S/)) {\n\t\tsearch_terms = document.getElementById('search').value.split(/\\s+/);\n\t} else {\n\t\treturn;\n\t}\n\t\n\t//------LOOK FOR STUFF-------\n\t// For each term in the user's input string, check to see if that term matches any \n\t// of the properties of every object in the library_content array\n\tif (search_type === 0) {\n\t\tfor (var i = 0; i < search_terms.length; i++) {\t\n\t\t\t// convert the search term into a regular expression for case-insensitive partial matching\n\t\t\tvar term = new RegExp(search_terms[i], 'i');\n\t\t\tfor (var a = 0; a < media_to_search.length; a++) {"],[0,""],[1,""],[0,"\n\t\t\t"]],"start1":1794,"start2":1794,"length1":4399,"length2":8},{"diffs":[[0,"for "],[-1,"each "],[0,"(x in "],[-1,"library_content"],[1,"media_to_search"],[0,"[a]) {"],[1,";"],[0,"\n\t\t\t"]],"start1":1905,"start2":1905,"length1":40,"length2":36},{"diffs":[[0,"\t\t\t\tif ("],[-1,"x"],[1,"media_to_search[a][x]"],[0,".match(t"]],"start1":1939,"start2":1939,"length1":17,"length2":37},{"diffs":[[0,"\n\t\n\t"],[-1,"display"],[1,"filter"],[0,"Medi"]],"start1":4507,"start2":4507,"length1":15,"length2":14}]],"length":4541,"saved":false}
